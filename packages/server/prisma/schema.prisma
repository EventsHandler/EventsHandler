// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// After Changes turn off the frontend and run "npx prisma migrate dev"
// To see DB and Tables in Docker use the following:
// psql postgresql://events:eventspwd@localhost:5432/events
// \dt - To view all the tables
// \d "Event" - To see the table "Event"
//  
// To turn off the pager use the following:
// \x off
// \pset pager off
// If you don't want to turn the pager off just type "q"

generator client {
  provider     = "prisma-client"
  output       = "../src/generated/prisma"
  moduleFormat = "esm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid(2))
  username  String
  password  String
  email     String   @unique
  authToken String?   @unique
  //birthDate DateTime
  createdAt DateTime @default(now())

  appPermissions BigInt @default(0)
  
  //relations
  eventsCreated Event[] @relation("eventOwner")
  events EventMember[] @relation("UserEvents_EventMember")
  groupsCreated Group[] @relation("groupOwner")
  groups GroupMember[] @relation("UserGroups_GroupMember")
  chatsCreated Chat[] @relation("chatOwner")
  chats ChatMember[] @relation("UserChats_ChatMember")
  messages Message[] @relation("UserMessages_UserMessage")
  ratingsGiven Rating[] @relation("raitingsGiven")
  ratingsReceived Rating[] @relation("raitingsRecieved")
  comments Comment[] @relation("commentsUser") 
  inbox Inbox[] @relation("userInboxMail")
}

model Event {
  id        String   @id @default(cuid(2))
  name     String
  image     String   @default("")
  description String   @default("")
  address   String   @default("")
  dateStart DateTime
  dateEnd   DateTime? @default(now())
  createdAt DateTime @default(now())

  settings BigInt @default(0)

  //relations
  ownerId     String
  owner       User     @relation("eventOwner", fields: [ownerId], references: [id])
  members     EventMember[] @relation("EventMembers_EventMember")
  announces   Announce[] @relation("EventAnnounces")
  comments    Comment[] @relation("commentsEvent")
  categoryId  String 
  category    Category @relation("eventCategory", fields: [categoryId], references: [id])
  linkedGroups Group[] @relation("events_groups_link")
  linkedChats Chat[] @relation("events_chats_link")
  defaultPermissions BigInt @default(0)
}

model Group {
  id        String  @id @default(cuid(2))
  name      String

  settings BigInt @default(0)
  //relations
  ownerId   String
  owner     User   @relation("groupOwner", fields: [ownerId], references: [id])
  members     GroupMember[] @relation("GroupMembers_GroupMember")
  linkedEvents Event[] @relation("events_groups_link")
  linkedChats Chat[] @relation("groups_chats_link")
  defaultPermissions BigInt @default(0)
}

model Chat {
  id        String  @id @default(cuid(2))
  name      String

  settings BigInt @default(0)
  //relations
  ownerId   String
  owner     User   @relation("chatOwner", fields: [ownerId], references: [id])
  members   ChatMember[] @relation("ChatMembers_ChatMember")
  messages  Message[] @relation("ChatMessages_ChatMessage")
  linkedEvents Event[] @relation("events_chats_link")
  linkedGroups Group[] @relation("groups_chats_link")
  defaultPermissions BigInt @default(0)
}

model EventMember {
  id String @id @default(cuid(2))
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  user      User @relation("UserEvents_EventMember", fields: [userId], references: [id])
  event     Event @relation("EventMembers_EventMember", fields: [eventId], references: [id])
  permissions BigInt @default(0)

  accepted Boolean @default(false)

  @@unique([userId, eventId])
}

model GroupMember {
  id String @id @default(cuid(2))
  userId    String
  groupId   String
  createdAt DateTime @default(now())
  user      User @relation("UserGroups_GroupMember", fields: [userId], references: [id])
  group     Group @relation("GroupMembers_GroupMember", fields: [groupId], references: [id])
  permissions BigInt @default(0)

  accepted Boolean @default(false)

  @@unique([userId, groupId])
}

model ChatMember {
  id String @id @default(cuid(2))
  userId    String
  chatId    String
  createdAt DateTime @default(now())
  user      User @relation("UserChats_ChatMember", fields: [userId], references: [id])
  chat     Chat @relation("ChatMembers_ChatMember", fields: [chatId], references: [id])
  permissions BigInt @default(0)

  accepted Boolean @default(false)
  
  @@unique([userId, chatId])
}

model Message {
  id      String @id @default(cuid(2))
  message String @default("")
  userId  String
  chatId  String    
  user      User @relation("UserMessages_UserMessage", fields: [userId], references: [id])
  chat     Chat @relation("ChatMessages_ChatMessage", fields: [chatId], references: [id])

  @@unique([userId, chatId])
}

model Rating {
  id       String @id @default(cuid(2))
  ratedId  String
  raterId  String
  rated    User @relation("raitingsRecieved", fields: [ratedId], references: [id])
  rater    User @relation("raitingsGiven", fields: [raterId], references: [id])
  rate     Int    @default(0)

  @@unique([ratedId, raterId])
}

model Announce {
  id          String   @id @default(cuid(2))
  title       String
  description String   @default("")
  createdAt   DateTime @default(now())

  // m-1 for Anouncement
  eventId String
  event   Event?  @relation("EventAnnounces", fields: [eventId], references: [id])
}

model Category {
  id   String @id @default(cuid(2))
  name String @unique

  // 1-m: for Participants
  events Event[] @relation("eventCategory")
}

model Comment {
  id String @id @default(cuid(2))
  userId String
  user User @relation("commentsUser", fields: [userId], references: [id], onDelete: Cascade)
  eventId String
  event Event @relation("commentsEvent", fields: [eventId], references: [id], onDelete: Cascade)
  comment String
}

model Inbox {
  id String @id @default(cuid(2))
  title String
  message String
  userId String
  user User @relation("userInboxMail", fields: [userId], references: [id], onDelete: Cascade)
}