scalar DateTime
scalar Upload

type Announces {
  title: String!
  description: String!
  event: Event
  createdAt: DateTime!
}

type Category {
  id: ID!
  name: String!
  events: [Event!]
}

type Event {
  id: ID!
  title: String!
  image: String!
  description: String!
  date: DateTime!
  address: String!
  createdAt: DateTime!
  userId: ID!

  creator: User!
  participants: [User!]
  announces: [Announces!]
  category: Category!
}

type User {
  id: ID!
  username: String!
  email: String!
  createdAt: DateTime!

  createdEvents: [Event!]
  events: [Event!]
}

extend type Query {
  events: [Event!]!
  myEvents: [Event!]
  event(eventId: ID!): Event
  me: User
  categories: [Category!]
}

extend type Mutation {
  login(email: String!): User!
  register(username: String!, password: String!, email: String!): User!
  createEvent(
    title: String!
    description: String!
    date: DateTime!
    image: Upload!
    address: String!
    categoryName: String!
  ): Event!
  editEvent(
    title: String!
    description: String!
    date: DateTime!
    image: Upload
    address: String!
    categoryName: String!
    eventId: ID!
  ): Event!
  subscribe(eventId: ID!): Event!
  unsubscribe(eventId: ID!): Event!
  testUpload(file: Upload!, test: String!): String!
  createAnnounce(eventId: ID!, title: String!, description: String!): Announces!
  apiTest(input: String!): String
}
