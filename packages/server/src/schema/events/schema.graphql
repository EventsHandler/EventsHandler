scalar DateTime
scalar Upload
scalar BigInt

type User {
  id: ID!
  username: String!
  password: String!
  email: String!
  authToken: String
  createdAt: DateTime!

  eventsCreated: [Event!]
  events: [EventMember!]
  groupsCreated: [Group!]
  groups: [GroupMember!]
  chatsCreated: [Chat!]
  chats: [ChatMember!]
  messages:[Message!]
  ratingsGiven: [Rating!] 
  ratingsReceived: [Rating!]
  comments: [Comment!]

  appPermissions: BigInt!
  inbox: [Inbox!]
}

type Event {
  id: ID!
  name: String!
  image: String!
  description: String!
  address: String!
  dateStart: DateTime!
  dateEnd: DateTime
  createdAt: DateTime!

  settings: BigInt!

  ownerId: ID!
  owner: User
  members: [EventMember!]
  announces: [Announce!]
  comments: [Comment!]
  categoryId: ID!
  category: Category
  linkedGroups: [Group!]
  linkedChats: [Chat!]
}

type Group {
  id: ID!
  name: String!

  settings: BigInt!

  ownerId: ID!
  owner: User 
  members: [GroupMember!]
  linkedEvents: [Event!]
  linkedChats: [Chat!]
}

type Chat {
  id: ID!
  name: String!

  settings: BigInt!

  ownerId: ID!
  owner: User
  members: [ChatMember!]
  messages: [Message!]
  linkedEvents: [Event!]
  linkedGroups: [Group!]
}

type EventMember {
  id: ID!
  userId: ID!
  eventId: ID!
  createdAt: DateTime!
  user: User
  event: Event
  permissions: BigInt!
}

type GroupMember {
  id: ID!
  userId: ID!
  groupId: ID!
  createdAt: DateTime!
  user: User
  group: Group 
  permissions: BigInt!
}

type ChatMember {
  id: ID!
  userId: ID!
  chatId: ID!
  createdAt: DateTime!
  user: User 
  chat: Chat 
  permissions: BigInt!
}

type Message {
  id: ID!
  message: String!
  userId: ID!
  chatId: ID!    
  user: User
  chat: Chat 
}

type Rating {
  id: ID!
  ratedId: ID!
  raterId: ID!
  rated: User
  rater: User 
  rate: Int!
}

type Announce {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime!
  eventId: ID!
  event: Event
}

type Category {
  id: ID!
  name: String!
  events: [Event!]
}

type Comment {
  id: ID!
  userId: ID!
  user: User
  eventId: ID!
  event: Event
  comment: String!
}

type Inbox {
  id: ID!
  title: String!
  message: String!
  userId: ID!
  user: User
}

extend type Query {
  test: String

  chat_get_as_owner: [Chat!]                                                          @auth(perm: manageChats)
  chat_get_as_member: [Chat!]                                                         @auth(perm: manageChats)
  chat_get_members(chatId: ID!): [ChatMember!]                                        @auth(perm: manageChats)
  chat_get_groups(chatId: ID!): [Group!]                                              @auth(perm: manageChats)
  chat_get_events(chatId: ID!): [Event!]                                              @auth(perm: manageChats)

  group_get_as_owner: [Group!]                                                        @auth(perm: manageGroups)
  group_get_as_member: [Group!]                                                       @auth(perm: manageGroups)
  group_get_members(groupId: ID!): [GroupMember!]                                    @auth(perm: manageGroups)
  group_get_chats(groupId: ID!): [Chat!]                                             @auth(perm: manageGroups)
  group_get_events(groupId: ID!): [Event!]                                           @auth(perm: manageGroups)
}

extend type Mutation {
  test: String

  user_register(username: String!, email: String!, password: String!): User!
  user_login(email: String!, password: String!): User!

  chat_create(name: String!): Chat!                                                   @auth(perm: manageChats)
  chat_delete(id: ID!): Chat!                                                         @auth(perm: manageChats)
  chat_member_join(chatId: ID!): ChatMember!                                          @auth(perm: manageChats)
  chat_member_kick(chatId: ID!, userId: ID!): ChatMember!                             @auth(perm: manageChats)
  chat_member_leave(chatId: ID!): ChatMember!                                         @auth(perm: manageChats)
  chat_member_accept(chatId: ID!, userId: ID!): ChatMember!                           @auth(perm: manageChats)
  chat_member_perm_add(chatId: ID!, userId: ID!, permission: String!): Boolean!       @auth(perm: manageChats)
  chat_member_perm_remove(chatId: ID!, userId: ID!, permission: String!): Boolean!    @auth(perm: manageChats)
  chat_message_send(chatId: ID!, message: String!): Message!                          @auth(perm: manageChats)
  chat_message_delete(messageId: ID!): Message!                                       @auth(perm: manageChats)
  chat_link_event(chatId: ID!, eventId: ID!): Chat!                                   @auth(perm: manageChats)
  chat_link_group(chatId: ID!, groupId: ID!): Chat!                                   @auth(perm: manageChats)
  chat_settings_add(chatId: ID!, setting: String!): Chat!                             @auth(perm: manageChats)
  chat_settings_remove(chatId: ID!, setting: String!): Chat!                          @auth(perm: manageChats)

  group_create(name: String!): Group!                                                 @auth(perm: manageGroups)
  group_delete(id: ID!): Group!                                                       @auth(perm: manageGroups) 
  group_member_join(groupId: ID!): GroupMember!                                       @auth(perm: manageGroups)    
  group_member_kick(groupId: ID!, userId: ID!): GroupMember!                          @auth(perm: manageGroups)
  group_member_leave(groupId: ID!): GroupMember!                                      @auth(perm: manageGroups) 
  group_member_accept(groupId: ID!, userId: ID!): GroupMember!                        @auth(perm: manageGroups)
  group_member_perm_add(groupId: ID!, userId: ID!, permission: String!): Boolean!     @auth(perm: manageGroups)
  group_member_perm_remove(groupId: ID!, userId: ID!, permission: String!): Boolean!  @auth(perm: manageGroups)
  group_link_event(groupId: ID!, eventId: ID!): Group!                                @auth(perm: manageGroups)
  group_link_chat(groupId: ID!, chatId: ID!): Chat!                                   @auth(perm: manageGroups)
  group_settings_add(groupId: ID!, setting: String!): Group!                          @auth(perm: manageGroups)
  group_settings_remove(groupId: ID!, setting: String!): Group!                       @auth(perm: manageGroups)

  event_create(
    name: String!,
    image: Upload!,
    description: String!,
    address: String!,
    dateStart: DateTime!,
    categoryId: ID!,
    dateEnd: DateTime,
    basedGroup: String,
    settings: BigInt): Event!                                                             @auth(perm: manageEvents) 
  event_delete(id: ID!): Event!                                                           @auth(perm: manageEvents)
  event_member_join(eventId: ID!): EventMember!                                           @auth(perm: manageEvents)  
  event_member_kick(eventId: ID!, userId: ID!): EventMember!                              @auth(perm: manageEvents)
  event_member_leave(eventId: ID!): EventMember!                                          @auth(perm: manageEvents)
  event_member_accept(eventId: ID!, userId: ID!): EventMember!                            @auth(perm: manageEvents)
  event_member_perm_add(eventId: ID!, userId: ID!, permission: String!): Boolean!     @auth(perm: manageEvents)
  event_member_perm_remove(eventId: ID!, userId: ID!, permission: String!): Boolean!  @auth(perm: manageEvents)
  event_link_group(eventId: ID!, groupId: ID!): Event!                                    @auth(perm: manageEvents)
  event_link_chat(eventId: ID!, chatId: ID!): Event!                                      @auth(perm: manageEvents)
  event_settings_add(eventId: ID!, setting: String!): Event!                              @auth(perm: manageEvents)
  event_settings_remove(eventId: ID!, setting: String!): Event!                           @auth(perm: manageEvents)
}
