scalar DateTime
scalar Upload
scalar BigInt

type User {
  id: ID!
  username: String!
  password: String!
  email: String!
  authToken: String
  createdAt: DateTime!

  eventsCreated: [Event!]
  events: [EventMember!]
  groupsCreated: [Group!]
  groups: [GroupMember!]
  chatsCreated: [Chat!]
  chats: [ChatMember!]
  messages:[Message!]
  ratingsGiven: [Rating!] 
  ratingsReceived: [Rating!]
  comments: [Comment!]

  appPermissions: BigInt!
}

type Event {
  id: ID!
  title: String!
  image: String!
  description: String!
  address: String!
  dateStart: DateTime!
  dateEnd: DateTime!
  createdAt: DateTime!

  settings: BigInt!

  ownerId: ID!
  owner: User
  members: [EventMember!]
  announces: [Announce!]
  comments: [Comment!]
  categoryId: ID!
  category: Category
  linkedGroups: [Group!]
  linkedChats: [Chat!]
}

type Group {
  id: ID!
  name: String!

  settings: BigInt!

  ownerId: ID!
  owner: User 
  members: [GroupMember!]
  linkedEvents: [Event!]
  linkedChats: [Chat!]
}

type Chat {
  id: ID!
  name: String!

  settings: BigInt!

  ownerId: ID!
  owner: User
  members: [ChatMember!]
  messages: [Message!]
  linkedEvents: [Event!]
  linkedGroups: [Group!]
}

type EventMember {
  id: ID!
  userId: ID!
  eventId: ID!
  createdAt: DateTime!
  user: User
  event: Event
  permissions: BigInt!
}

type GroupMember {
  id: ID!
  userId: ID!
  groupId: ID!
  createdAt: DateTime!
  user: User
  group: Group 
  permissions: BigInt!
}

type ChatMember {
  id: ID!
  userId: ID!
  chatId: ID!
  createdAt: DateTime!
  user: User 
  chat: Chat 
  permissions: BigInt!
}

type Message {
  id: ID!
  content: String!
  userId: ID!
  chatId: ID!    
  user: User
  chat: Chat 
}

type Rating {
  id: ID!
  ratedId: ID!
  raterId: ID!
  rated: User
  rater: User 
  rate: Int!
}

type Announce {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime!
  eventId: ID!
  event: Event
}

type Category {
  id: ID!
  name: String!
  events: [Event!]
}

type Comment {
  id: ID!
  fromId: ID!
  from: User
  eventId: ID!
  event: Event
  comment: String!
}

extend type Query {
  test: String
}

extend type Mutation {
  test: String
}
