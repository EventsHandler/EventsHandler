type Announce {
  createdAt: DateTime!
  description: String
  event: Event
  eventId: String
  id: ID!
  title: String!
}

scalar BigInt

type Category {
  events: [Event!]
  id: ID!
  name: String!
}

type Chat {
  id: ID!
  linkedEvents: [Event!]
  linkedGroups: [Group!]
  members: [ChatMember!]
  messages: [Message!]
  name: String!
  owner: User
  ownerId: String!
}

type ChatMember {
  chat: Chat!
  chatId: String!
  createdAt: DateTime!
  id: ID!
  permissions: BigInt!
  user: User!
  userId: String!
}

type Comment {
  comment: String!
  event: Event!
  eventId: String
  from: User!
  fromId: String!
  id: ID!
}

scalar DateTime

type Event {
  address: String!
  announces: [Announce!]
  category: Category!
  categoryId: String!
  comments: [Comment!]
  createdAt: DateTime!
  dateEnd: DateTime!
  dateStart: DateTime!
  description: String!
  id: ID!
  image: String!
  linkedChats: [Chat!]
  linkedGroups: [Group!]
  members: [EventMember!]
  owner: User
  ownerId: String!
  title: String!
}

type EventMember {
  createdAt: DateTime!
  event: Event!
  eventId: String!
  id: ID!
  permissions: BigInt!
  user: User!
  userId: String!
}

type Group {
  id: ID!
  linkedChats: [Chat!]
  linkedEvents: [Event!]
  members: [GroupMember!]
  name: String!
  owner: User
  ownerId: String!
}

type GroupMember {
  createdAt: DateTime!
  group: Group!
  groupId: String!
  id: ID!
  permissions: BigInt!
  user: User!
  userId: String!
}

type Message {
  chat: Chat!
  chatId: String!
  content: String!
  id: ID!
  user: User!
  userId: String!
}

type Mutation {
  apiTest(input: String!): String
  askForCategory(input: String!): String
  askForDescription(input: String!): String
  comment(comment: String!, eventId: String!, fromId: String!): Comment!
  createAnnounce(description: String!, eventId: ID!, title: String!): Announce!
  createEvent(
    address: String!
    categoryName: String!
    dateEnd: DateTime!
    dateStart: DateTime!
    description: String!
    image: Upload!
    title: String!
  ): Event!
  deleteEvent(eventId: ID!): Event
  editEvent(
    address: String!
    categoryName: String!
    dateEnd: DateTime!
    dateStart: DateTime!
    description: String!
    eventId: ID!
    image: Upload
    title: String!
  ): Event!
  login(password: String!, username: String!): User!
  rateUser(fromId: String!, rate: Int!, toId: String!): Boolean
  register(email: String!, password: String!, username: String!): User!
  subscribe(eventId: ID!): Event!
  testUpload(file: Upload!, test: String!): String!
  unsubscribe(eventId: ID!): Event!
}

type Query {
  categories: [Category!]
  event(eventId: ID!): Event
  events(category: String): [Event!]
<<<<<<< HEAD
<<<<<<< HEAD
  findByTitle(title: String!): Event!
=======
  findByCategory(category: String!): [Event!]
>>>>>>> 289757a (sda)
=======
>>>>>>> 5a83916 (a)
  joinedEvents(userId: String): [Event!]
  me: User
  myEvents: [Event!]
  user(userId: String!): User
  users(test: String!): [User!]
}

type Rating {
  id: ID!
  rate: Int!
  rated: User!
  ratedId: String!
  rater: User!
  raterId: String!
}

scalar Upload

type User {
  authToken: String
  chats: [ChatMember!]
  chatsCreated: [Chat!]
  comments: [Comment!]
  createdAt: DateTime!
  email: String!
  events: [EventMember!]
  eventsCreated: [Event!]
  groups: [GroupMember!]
  groupsCreated: [Group!]
  id: ID!
  messages: [Message!]
  password: String!
  ratingsGiven: [Rating!]
  ratingsReceived: [Rating!]
  username: String!
}
